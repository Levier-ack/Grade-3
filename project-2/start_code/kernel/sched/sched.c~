#include "lock.h"
#include "time.h"
#include "stdio.h"
#include "sched.h"
#include "queue.h"
#include "screen.h"

pcb_t pcb[NUM_MAX_TASK];

/* current running task PCB */
pcb_t *current_running;

/* global process id */
pid_t process_id = 1;

static void check_sleeping()
{
}

void scheduler(void)
{
    int t,temp,sign;
    temp = 0;
    sign = 0;
	printk("cur_run:%d\n",(*current_running).pid);
	printk("pro_id:%d\n",process_id);
    /*for(t=1;t<17;t++){
	if(pcb[t].first_sched)
		{sign=1;break;}
	current_running = &pcb[1];
	pcb[1].first_sched = 1;
	}
	printk("sign:%d\n",sign);
    for(t=process_id+1;t<17 && (temp == 0)&& (sign == 1);t++){
	if(pcb[t].status == TASK_READY){	
		current_running = &pcb[t];
		temp = 1;
		process_id = t;
		break;
		}
	}
	printk("temp:%d  t:%d\n",temp,t);
    for(t=1;t<=process_id && (temp == 0) &&(sign == 1);t++){
	if(pcb[t].status == TASK_READY){
		current_running = &pcb[t];
		temp = 1;
		process_id = t;
		break;
		}
	}*/
	process_id++;
	current_running = &pcb[process_id];
    	printk("pro_id_2:%d\n",process_id);
    // TODO schedule
    // Modify the current_running pointer.
}

void do_sleep(uint32_t sleep_time)
{
    // TODO sleep(seconds)
}

void do_block(queue_t *queue)
{
    // block the current_running task into the queue
}

void do_unblock_one(queue_t *queue)
{
    // unblock the head task from the queue
}

void do_unblock_all(queue_t *queue)
{
    // unblock all task in the queue
}
